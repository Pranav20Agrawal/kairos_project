# main.py

import sys      # For system-level control (arguments, file checks, exits).
import os       # For system-level control (arguments, file checks, exits).
import signal   # Allows graceful shutdown on Ctrl+C.
from PySide6.QtWidgets import QApplication, QMessageBox     # PySide6 (Qt for Python) GUI framework.
from src.main_window import KairosMainWindow                # The main app window (UI + logic binding).
from src.logger_config import setup_logging                 # Sets up logging to kairos.log.
from src.settings_manager import SettingsManager            # Loads/Validates user config from config.json.
from dotenv import load_dotenv                              # Loads environment variables from .env file (like API keys).

__version__ = "1.0.0"       # Keeps track of app version → useful for UI, debugging, and update checks.

if __name__ == "__main__":      # Ensures this file only runs if executed directly (not imported as a module). Standard Python practice.
    
    # Load environment variables from .env file (better security)
    load_dotenv()

    # Configure logging as the very first step (ensures errors, warnings, and events are recorded to kairos.log right from the start.)
    setup_logging()

    # Creates the main Qt event loop → required for GUI apps.
    app = QApplication(sys.argv)    # sys.argv passes command-line arguments
    
    # Signal handler for graceful shutdown on Ctrl+C (SIGINT)
    # This connects the terminal's interrupt signal to Qt's quit signal,
    # which then triggers the _shutdown_application method.
    signal.signal(signal.SIGINT, lambda sig, frame: app.quit())  # Prevents the app from hanging in the terminal when user interrupts.
    
    # First-Time Setup Check
    settings = SettingsManager()
    # config.json → must have setup_complete = True.
    # voiceprint.npy → must exist (generated by enroll_voice.py).
    # Guarantees voice enrollment before assistant can run.
    if not settings.settings.core.setup_complete or not os.path.exists("voiceprint.npy"):
        msg_box = QMessageBox()
        msg_box.setWindowTitle("K.A.I.R.O.S. First-Time Setup")
        msg_box.setIcon(QMessageBox.Icon.Information)
        msg_box.setText("Welcome to K.A.I.R.O.S.!\n\nTo get started, you need to enroll your voice.")
        msg_box.setInformativeText(
            "Please run the following command in your terminal from the project's root directory:\n\n"
            "python enroll_voice.py\n\n"
            "The application will now exit. Please run the enrollment script and then start K.A.I.R.O.S. again."
        )
        msg_box.setStandardButtons(QMessageBox.StandardButton.Ok)
        msg_box.exec()
        sys.exit(0)

    # Proceed with normal application launch
    app.setQuitOnLastWindowClosed(False)    # Keeps background workers alive even if UI window closes.

    window = KairosMainWindow(app_version = __version__)    # Creates KairosMainWindow → loads full UI and backend workers.
    window.show()       # Displays the app.

    # Start the Qt event loop
    # app.exec() → enters the Qt event loop (keeps app alive).
    # sys.exit() → ensures clean exit code when app is closed.
    sys.exit(app.exec())